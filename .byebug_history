exit
c
quit
self[start]
self[start].pos
self[start].forward_moves
self[start]
self[start].moves
self[start]
start
c
quit
exit
test_board.move!(@pos, end_pos)
end_pos
@pos
test_board
c
quit
exit
test_board.move!(@pos, end_pos)
end_pos
@pos
test_board
c
row
c
exit
moves[0]
move_into_check?(moves[1])
move_into_check?(moves[0])
moves[0]
moves
c
row
c
exit
row
c
s
col
row
c
move_into_check?(moves[0])
moves
moves.reject { |end_pos| move_into_check?(end_pos) }
c
row
c
exit
position
board
color
pos
row
forward_dir
c
forward_dir
col
row
c
row
forward_one
c
s
forward_dir
row
pos
exit
c
exit
new_board
exit
    end
      piece.class.new(piece.color, new_board, piece.pos)
pieces.each do |piece|
new_board
pieces[1]
pieces[0]
pieces
pieces[20].class
pieces[25].class
pieces[15].class
pieces[0].is_a? Piece
pieces[0].class
piece[0]
pieces
new_board
exit
test_board
exit
end_pos
@pos
moves.reject { |end_pos| move_into_check?(end_pos) }
moves.move_into_check?(end_pos)
moves
move_into_check?(end_pos)
moves
exit
find_king(:black).pos
find_king(:white).pos
find_king(:white)
find_king(:black)
pieces[1].class
pieces[0].class
pieces[0]
pieces[0].class
rows[0][0].class
rows[0][0].color
rows[0][0]
rows[0][0][0]
rows[0][0]
rows[0]
rows
pieces[0]
rows.flatten
rows
pieces
pieces[0]
pieces
pieces.first
pieces
new_board
exit
new_board
@grid
rows
rows.flatten.select { |piece| piece.is_a?(Piece) }
rows
pieces
find_king(color)
king_pos = find_king(color)
color
exit
rows
@rows
c
moves
q
c
moves
exit
self.color
moves
exit
finish
f
c
exit
moves
n
moves
n
moves
n
take_left
s
take_right
s
y
x
moves
c
s
pos
take_right
pos
take_left
s
take_right
s
take_right
s
y
x
exit
@board[[7,-8]]
@board[[7,-9]]
@board[[7,-10]]
@board[[7,-8]]
@board[[7,-7]]
@board[[7,-2]]
@board[[7,8]]
@board[[7,8]].color
@board[[7,-1]].color
@board[[7,-1]]
@board[7,-1]
@board[7,-1].color
exit
s
exit
moves
c
exit
moves
c
moves
c
moves
self.moves
moves
self.color
exit
self.moves
self[[0,0]]
self
self.moves
exit
self.pos
c
self.pos
self.color
c
self.pos
self.color
c
self.pos
c
self.pos
exit
self.pos
self.color
c
self.pos
self.color
c
self.color
exit
self.color
c
self.color
c
self.color
self
self[2,2]
self[[2,2]].color
pos
c
exit
moves
c
moves
c
moves
exit
moves
c
moves
exit
all_moves
c
all_moves
c
all_moves
exit
all_moves
